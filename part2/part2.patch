diff -Naur linux-5.8.1/arch/x86/entry/syscalls/syscall_64.tbl Desktop/linux-5.8.1/arch/x86/entry/syscalls/syscall_64.tbl
--- linux-5.8.1/arch/x86/entry/syscalls/syscall_64.tbl	2020-08-11 06:48:12.000000000 -0700
+++ Desktop/linux-5.8.1/arch/x86/entry/syscalls/syscall_64.tbl	2021-10-02 15:32:48.640629190 -0700
@@ -360,6 +360,7 @@
 437	common	openat2			sys_openat2
 438	common	pidfd_getfd		sys_pidfd_getfd
 439	common	faccessat2		sys_faccessat2
+440	common	memuse_syscall		sys_memuse_syscall
 
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
diff -Naur linux-5.8.1/include/linux/syscalls.h Desktop/linux-5.8.1/include/linux/syscalls.h
--- linux-5.8.1/include/linux/syscalls.h	2020-08-11 06:48:12.000000000 -0700
+++ Desktop/linux-5.8.1/include/linux/syscalls.h	2021-10-02 15:32:26.053271324 -0700
@@ -1424,4 +1424,6 @@
 			    unsigned int nsops,
 			    const struct old_timespec32 __user *timeout);
 
+asmlinkage long sys_memuse_syscall(pid_t pid, int memory_type);
+
 #endif
diff -Naur linux-5.8.1/Makefile Desktop/linux-5.8.1/Makefile
--- linux-5.8.1/Makefile	2020-08-11 06:48:12.000000000 -0700
+++ Desktop/linux-5.8.1/Makefile	2021-10-02 15:31:28.490907793 -0700
@@ -1070,7 +1070,7 @@
 export MODULES_NSDEPS := $(extmod-prefix)modules.nsdeps
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/ memuse/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff -Naur linux-5.8.1/memuse/Makefile Desktop/linux-5.8.1/memuse/Makefile
--- linux-5.8.1/memuse/Makefile	1969-12-31 16:00:00.000000000 -0800
+++ Desktop/linux-5.8.1/memuse/Makefile	2021-10-02 21:07:21.490464955 -0700
@@ -0,0 +1,7 @@
+obj-y := memuse.o
+
+all:
+	make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules
+
+clean:
+	make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean
\ No newline at end of file
diff -Naur linux-5.8.1/memuse/memuse.c Desktop/linux-5.8.1/memuse/memuse.c
--- linux-5.8.1/memuse/memuse.c	1969-12-31 16:00:00.000000000 -0800
+++ Desktop/linux-5.8.1/memuse/memuse.c	2021-10-08 19:07:20.807781168 -0700
@@ -0,0 +1,45 @@
+#include <linux/kernel.h>   
+#include <linux/syscalls.h>
+#include <linux/pid.h> 
+#include <linux/mm_types.h>
+#include <linux/sched.h>
+#include <linux/types.h>
+
+
+// asmlinkage long memuse_syscall(unsigned int pid, unsigned int memory_type)
+// {
+//         struct pid* res = get_pid(find_vpid(nr));
+//         printk("pid:%d, memory_type:%d\n", pid, memory_type);
+//         return res?NULL:-1,0;
+// }
+
+SYSCALL_DEFINE2(memuse_syscall, pid_t, pid, int, memory_type){
+        struct pid* res = get_pid(find_vpid(pid));
+        printk("pid:%d, memory_type:%d\n", pid, memory_type);
+        return (res==NULL?-1:1);
+        // return 0;
+}
+
+// struct task_struct;
+// struct mm_struct;
+
+// SYSCALL_DEFINE2(memuse_syscall, pid_t, pid, int, memory_type){
+//         struct pid* _pid = get_pid(find_vpid(pid));
+//         if(_pid == NULL)
+//                 return -1;
+//         printk("pid:%d, memory_type:%d\n", pid, memory_type);
+//         read_lock(&tasklist_lock);
+//         struct task_struct *ts = find_get_task_by_vpid(pid);
+//         read_unlock(&tasklist_lock);
+//         struct mm_struct *base_mm = ts->mm;
+//         unsigned long start_process_stack = base_mm->start_stack;
+//         unsigned long start_process_heap = base_mm->start_brk;
+//         unsigned long end_process_heap = base_mm->brk;
+//         dump_stack();
+
+//         // pid_t kernel_pid = getpid();
+//         // printk("pid:%d\n", kernel_pid);
+//         // struct task_struct *kernel_ts = find_get_task_by_vpid(kernel_pid);
+        
+//         return 1;
+// }
\ No newline at end of file
diff -Naur linux-5.8.1/.vscode/settings.json Desktop/linux-5.8.1/.vscode/settings.json
--- linux-5.8.1/.vscode/settings.json	1969-12-31 16:00:00.000000000 -0800
+++ Desktop/linux-5.8.1/.vscode/settings.json	2021-10-03 14:54:55.791243521 -0700
@@ -0,0 +1,7 @@
+{
+    "files.associations": {
+        "kernel.h": "c",
+        "sched.h": "c",
+        "types.h": "c"
+    }
+}
\ No newline at end of file
